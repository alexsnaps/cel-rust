use crate::reference::Val;

pub struct Ast {
    pub expr: IdedExpr,
    //sourceInfo: SourceInfo,
    //typeMap:    map[int64]*types.Type,
    //refMap:     map[int64]*ReferenceInfo,
}

#[derive(Debug, Default)]
pub enum Expr {
    #[default]
    /// UnspecifiedExprKind represents an unset expression with no specified properties.
    Unspecified,

    /// CallKind represents a function call.
    Call(CallExpr),

    /// ComprehensionKind represents a comprehension expression generated by a macro.
    Comprehension,

    /// IdentKind represents a simple variable, constant, or type identifier.
    Ident(String),

    /// ListKind represents a list literal expression.
    List,

    /// LiteralKind represents a primitive scalar literal.
    Literal(Val),

    /// MapKind represents a map literal expression.
    Map,

    /// SelectKind represents a field selection expression.
    Select(SelectExpr),

    /// StructKind represents a struct literal expression.
    Struct,
}

#[derive(Debug, Default)]
pub struct IdedExpr {
    pub id: u64,
    pub expr: Expr,
}

#[derive(Debug, Default)]
pub struct CallExpr {
    pub func_name: String,
    pub target: Option<Box<IdedExpr>>,
    pub args: Vec<IdedExpr>,
}

#[derive(Debug, Default)]
pub struct SelectExpr {
    pub op: String,
    pub operand: Box<IdedExpr>,
    pub id: String,
}
